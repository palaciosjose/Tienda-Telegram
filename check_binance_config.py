#!/usr/bin/env python3
"""
Script para revisar y ajustar la configuraci√≥n existente de Binance
"""

import sqlite3
import os

def check_existing_config():
    """Revisar configuraci√≥n actual"""
    print("üîç REVISANDO CONFIGURACI√ìN ACTUAL DE BINANCE")
    print("=" * 50)
    
    if not os.path.exists('data/db/main_data.db'):
        print("‚ùå ERROR: Base de datos no encontrada")
        return None
    
    try:
        conn = sqlite3.connect('data/db/main_data.db')
        cursor = conn.cursor()
        cursor.execute("SELECT api_key, api_secret, merchant_id FROM binance_data;")
        result = cursor.fetchone()
        conn.close()
        
        if result:
            api_key, api_secret, merchant_id = result
            
            print("‚úÖ CONFIGURACI√ìN ENCONTRADA:")
            print(f"üîë API Key: {api_key[:10]}..." if api_key else "‚ùå API Key: No configurado")
            print(f"üîê API Secret: {api_secret[:10]}..." if api_secret else "‚ùå API Secret: No configurado")
            print(f"üè™ Merchant ID: {merchant_id}" if merchant_id else "‚ùå Merchant ID: No configurado")
            
            return result
        else:
            print("‚ùå No hay configuraci√≥n de Binance")
            return None
            
    except Exception as e:
        print(f"‚ùå Error leyendo configuraci√≥n: {e}")
        return None

def analyze_config(api_key, api_secret, merchant_id):
    """Analizar la configuraci√≥n actual"""
    print("\nüîç AN√ÅLISIS DE LA CONFIGURACI√ìN:")
    print("=" * 40)
    
    issues = []
    
    # Verificar API Key
    if api_key and len(api_key) > 20:
        print("‚úÖ API Key: Formato correcto")
    else:
        print("‚ö†Ô∏è API Key: Posible problema de formato")
        issues.append("api_key")
    
    # Verificar API Secret
    if api_secret and len(api_secret) > 20:
        print("‚úÖ API Secret: Formato correcto")
    else:
        print("‚ö†Ô∏è API Secret: Posible problema de formato")
        issues.append("api_secret")
    
    # Verificar Merchant ID / Wallet Address
    if merchant_id:
        if merchant_id.isdigit():
            print(f"üî∂ Merchant ID: {merchant_id} (ID num√©rico)")
            print("‚ÑπÔ∏è Esto podr√≠a ser un ID de merchant, no una wallet address")
            issues.append("wallet_address")
        elif merchant_id.startswith('0x') or len(merchant_id) > 20:
            print(f"‚úÖ Wallet Address: {merchant_id[:15]}...")
        else:
            print(f"‚ö†Ô∏è Merchant ID/Wallet: {merchant_id} (formato unclear)")
            issues.append("wallet_address")
    else:
        print("‚ùå Merchant ID/Wallet: No configurado")
        issues.append("wallet_address")
    
    return issues

def test_payment_flow():
    """Mostrar c√≥mo se ve el flujo de pago actual"""
    print("\nüì± FLUJO DE PAGO ACTUAL:")
    print("=" * 30)
    
    try:
        import dop
        binance_data = dop.get_binancedata()
        
        if binance_data:
            api_key, api_secret, merchant_id = binance_data
            
            print("Cuando un cliente selecciona Binance Pay, ve esto:")
            print()
            print("üí≥ **Pago con Binance Pay**")
            print()
            print("üì¶ **Producto:** Ejemplo")
            print("üî¢ **Cantidad:** 1")
            print("üí∞ **Total:** $10 USD")
            print()
            print("üöÄ **Instrucciones de pago:**")
            print()
            print("1Ô∏è‚É£ Abre tu app de **Binance**")
            print("2Ô∏è‚É£ Ve a **'Pay'** ‚Üí **'Enviar'**")
            print(f"3Ô∏è‚É£ Env√≠a **$10 USD** a: `{merchant_id}`")
            print()
            print("‚ö†Ô∏è **PROBLEMA DETECTADO:**")
            
            if merchant_id and merchant_id.isdigit():
                print(f"‚Ä¢ El campo tiene: {merchant_id} (parece ser un Merchant ID)")
                print("‚Ä¢ Pero necesitas: Una wallet address de Binance")
                print("‚Ä¢ Ejemplo correcto: 0x742d35Cc6634C0532925a3b8D404bBf...")
                print()
                print("üîß **SOLUCI√ìN:** Necesitas configurar tu wallet address real")
            else:
                print("‚Ä¢ Configuraci√≥n parece correcta")
                
        else:
            print("‚ùå No se pudo leer la configuraci√≥n")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")

def fix_wallet_address():
    """Corregir la wallet address"""
    print("\nüîß CORREGIR WALLET ADDRESS")
    print("=" * 30)
    
    print("üéØ NECESITAS:")
    print("‚Ä¢ Tu wallet address personal de Binance")
    print("‚Ä¢ NO es el Merchant ID")
    print("‚Ä¢ Es donde recibes criptomonedas")
    print()
    print("üìç C√ìMO ENCONTRAR TU WALLET ADDRESS:")
    print("1. Abre Binance app/web")
    print("2. Ve a 'Wallet' ‚Üí 'Overview'")
    print("3. Selecciona una criptomoneda (ej: USDT)")
    print("4. Toca 'Deposit'")
    print("5. Copia la direcci√≥n que aparece")
    print()
    
    current_config = check_existing_config()
    if current_config:
        api_key, api_secret, merchant_id = current_config
        print(f"üí° Actualmente tienes: {merchant_id}")
        print()
    
    choice = input("¬øQuieres actualizar tu wallet address? (s/n): ").lower().strip()
    
    if choice.startswith('s'):
        print("\nüìù IMPORTANTE:")
        print("‚Ä¢ La wallet address empieza con 0x (para ETH/BSC)")
        print("‚Ä¢ O con otros prefijos seg√∫n la red")
        print("‚Ä¢ Ejemplo: 0x742d35Cc6634C0532925a3b8D404bBf...")
        print()
        
        new_wallet = input("Ingresa tu wallet address de Binance: ").strip()
        
        if new_wallet and len(new_wallet) > 10:
            # Actualizar solo el wallet address, mantener API keys
            try:
                conn = sqlite3.connect('data/db/main_data.db')
                cursor = conn.cursor()
                
                if current_config:
                    # Mantener API keys existentes, solo cambiar wallet
                    cursor.execute("UPDATE binance_data SET merchant_id = ? WHERE rowid = 1", (new_wallet,))
                else:
                    # Crear nueva entrada solo con wallet
                    cursor.execute("INSERT INTO binance_data VALUES(?, ?, ?)", ("", "", new_wallet))
                
                conn.commit()
                conn.close()
                
                print("‚úÖ Wallet address actualizada!")
                print(f"üìç Nueva wallet: {new_wallet}")
                
                return True
                
            except Exception as e:
                print(f"‚ùå Error actualizando: {e}")
                return False
        else:
            print("‚ùå Wallet address inv√°lida")
            return False
    else:
        print("‚ÑπÔ∏è Configuraci√≥n mantenida sin cambios")
        return False

def show_recommendations():
    """Mostrar recomendaciones"""
    print("\nüí° RECOMENDACIONES:")
    print("=" * 20)
    
    current_config = check_existing_config()
    if current_config:
        api_key, api_secret, merchant_id = current_config
        issues = analyze_config(api_key, api_secret, merchant_id)
        
        if not issues:
            print("‚úÖ Tu configuraci√≥n est√° completa")
            print("‚úÖ Solo actualiza el payments.py para seguridad")
        else:
            if "wallet_address" in issues:
                print("üî∂ CR√çTICO: Configura tu wallet address real")
                print("   - Sin esto, los clientes no saben d√≥nde enviar dinero")
            
            if "api_key" in issues or "api_secret" in issues:
                print("üî∂ OPCIONAL: Las API keys est√°n para verificaci√≥n autom√°tica")
                print("   - Puedes usar verificaci√≥n manual sin ellas")
    
    print("\nüöÄ SIGUIENTE PASO:")
    print("1. Actualiza payments.py con el c√≥digo de seguridad")
    print("2. Agrega los callbacks a main.py")
    print("3. Reinicia el bot")

def main():
    """Funci√≥n principal"""
    print("üîç VERIFICADOR DE CONFIGURACI√ìN BINANCE")
    print("Este script revisa tu configuraci√≥n actual")
    print()
    
    # Revisar configuraci√≥n actual
    current_config = check_existing_config()
    
    if current_config:
        api_key, api_secret, merchant_id = current_config
        
        # Analizar configuraci√≥n
        issues = analyze_config(api_key, api_secret, merchant_id)
        
        # Mostrar flujo de pago
        test_payment_flow()
        
        # Ofrecer correcci√≥n si hay problemas
        if "wallet_address" in issues:
            print("\n‚ö†Ô∏è PROBLEMA DETECTADO: Wallet address necesita correcci√≥n")
            fix_wallet_address()
        
        # Mostrar recomendaciones
        show_recommendations()
        
    else:
        print("\n‚ùå No se encontr√≥ configuraci√≥n de Binance")
        print("Ejecuta el setup desde el bot: /adm ‚Üí Configuraci√≥n de pago")

if __name__ == '__main__':
    main()